const Swagger = require('swagger-client')
const yaml = require('js-yaml');
const fs = require('fs');
var q = require("q");
var soap = require('soap');

var parseDocument = require("../services/documentParser");
var parseWsdl = require("../services/wsdlParser");
var viewDocument = require("../services/documentViewer");

var documentParser = async function (path) {
    var deferred = q.defer();
    var doc;
    var swaggerType = "spec";

    try {
        if (path.includes("http")) {
            swaggerType = "url"
            doc = path;
        } else if (path.endsWith("yaml") || path.endsWith("json")) {
            doc = yaml.safeLoad(fs.readFileSync(path));
        } else {
            throw "Type or Path is unsupported."
        }
        await Swagger({
            [swaggerType]: doc
        }).then((resolved) => {
            resolved.errors // resolution errors, if any

            var parsedData = parseDocument.extractPathsAndMethods(resolved.spec.paths, resolved.spec);
            resolved.spec // the resolved spec
            deferred.resolve(parsedData);

        })
    } catch (e) {
        console.error(e);
        deferred.reject(e);
    }
    return deferred.promise;
}


var wsdlParser = async function (path) {
    //  wsdlObject;
    var deferred = q.defer();
    var returnSoapReader = await soap.createClient(path, async function (err, client) {
        if (err) {
            console.error(err);
        } else {
            var wsdlObject = client.describe();
            var returnWsdlData = await parseWsdl.readWsdl(wsdlObject);
          
            if (returnWsdlData) {
                deferred.resolve(returnWsdlData);
            }
        }
    });
    return deferred.promise;
}

//testThis(wsdl);
async function soapViewer(wsdl){
	returnObject = [];
	var returnSoap =  await wsdlParser(wsdl);
	if(returnSoap)
		return returnSoap;
}

var documentViewer = async function (path) {
    var deferred = q.defer();
    var doc;
    var swaggerType = "spec";
    try {
        if (path.includes("http")) {
            swaggerType = "url"
            doc = path;
        } else if (path.endsWith("yaml") || path.endsWith("json")) {
            doc = yaml.safeLoad(fs.readFileSync(path));
        } else {
            throw "Type or Path is unsupported."
        }
        await Swagger({
            [swaggerType]: doc
        }).then((resolved) => {
            resolved.errors // resolution errors, if any

            var parsedData = viewDocument.extractData(resolved.spec.paths, resolved.spec);
            resolved.spec // the resolved spec
            deferred.resolve(parsedData);
        })
    } catch (e) {
        console.error(e);
        deferred.reject(e);
    }
    return deferred.promise;
}

async function test(file){

    var soapData = await soapViewer.readWsdl(file);
    console.log("All Data :: ",soapData);

}
test("../files/sample.wsdl")
// module.exports.documentParser = documentParser
// module.exports.wsdlParser = wsdlParser
module.exports.documentViewer = documentViewer
module.exports.soapViewer = soapViewer