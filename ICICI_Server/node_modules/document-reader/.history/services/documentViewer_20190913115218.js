var displayData = {};
var paramData = [];

/* Extracts Data to be displayed on Mapping Page */

async function extractData(path, spec) {

    
    //Extract Description
    if (spec.info.description !== undefined) {
        displayData["description"]= spec.info.description;
    }
    else {
        displayData["description"]= ""
    }

    var returnExtractPathsAndMethods = await extractPathsAndMethods(path, spec);
    if (returnExtractPathsAndMethods) {
        //console.log("End Result ::: ",JSON.stringify(returnExtractPathsAndMethods));
        return returnExtractPathsAndMethods
    }

   // return returnExtractPathsAndMethods
}


//This function gets all paths and methods from a JSON API Swagger Documentation
async function extractPathsAndMethods(specPaths, spec) {

    displayData["operations"] = [];
    var paths = Object.keys(specPaths);
    var methods;
    var albatross
    var paramVal;
    var operationId;
    // Iterate to get all Methods for each and every path
    for (var i = 0; i < paths.length; i++) {
        methods = Object.keys(spec.paths[paths[i]]);

        // Iterate to get all Parameters for each Method
        for (var j = 0; j < methods.length; j++) {
            if(typeof spec.paths[paths[i]][methods[j]].operationId !== undefined){
                operationId = spec.paths[paths[i]][methods[j]].operationId;
            } else {
                operationId = "";
            }
            // Check whether parameter exists or not inside method
            if (spec.paths[paths[i]][methods[j]].parameters !== undefined && spec.paths[paths[i]][methods[j]].parameters.length !== 0) {
                var parameters = spec.paths[paths[i]][methods[j]].parameters;
                
                for (var k = 0; k < parameters.length; k++) {
                   
                    // Search for Mandatory fields
                       

                    if (spec.paths[paths[i]][methods[j]].parameters[k].schema !== undefined) {
                        //getNames(paths[i], methods[j], spec.paths[paths[i]][methods[j]].parameters[k].schema)
                        paramVal = spec.paths[paths[i]][methods[j]].parameters[k].schema.properties;
                        //paramData.push(paramVal);


                        //Remove Extra Values and convert back to JSON Tree
                        var flattenedValues =  await flatten(paramVal)

                        
                        //console.log("Display Dat :: ",abyss);
                        var returnRemoveExtraProperties= await removeExtraProperties(flattenedValues);
                        
                        if(returnRemoveExtraProperties){
                            
                            var schemaData = await formHierarchy(returnRemoveExtraProperties)
                            //console.log("Returned Data : ",JSON.stringify(schemaData));
                            paramData.push(schemaData);
                        }

                        /* Remove extra values such as xml etc. */
                        //albatross = await removeAdditionalValues(paramVal);

                        //await readDocument(paths[i], methods[j], spec.paths[paths[i]][methods[j]].parameters)
                    } else {

                        //console.log(parameters[l])
                        var paramVal = spec.paths[paths[i]][methods[j]].parameters[k].name
                        var required = spec.paths[paths[i]][methods[j]].parameters[k].required
                        var type = spec.paths[paths[i]][methods[j]].parameters[k].type?spec.paths[paths[i]][methods[j]].parameters[k].type:"";
                        var params = JSON.parse("{\""+paramVal+"\":"+"{\"type\":"+"\""+type+"\"}}");

//Incase required is needed
//var params = JSON.parse("{\""+paramVal+"\":"+"{\"type\":"+"\""+type+"\","+"\"required\":"+"\""+required+"\"}}");
                        paramData.push(params);
                    }
                }
                displayData["operations"].push({operationId: operationId, path: paths[i], method: methods[j], fields: paramData })
                paramData = [];
            } else {
                // esqlData.push(paths[i] + ":" + methods[j] + ":")
                displayData["operations"].push({operationId: operationId, path: paths[i], method: methods[j], fields: ""});
                var parameters = spec.paths[paths[i]];
                
            }
        }

    }
    // esqlData = await getUnique(esqlData);
    // esqlData = await transformEachRecord(esqlData);
    // if(albatross)
    return displayData;
}

//Get Names for all Parameters from methods
function getNames(path, method, array) {
    for (var i = 0; i < array.length; i++) {
        if (typeof array[i].type !== "undefined") {
            esqlData.push(path + ":" + method + ":" + array[i].name + "." + array[i].type);
        }
    }
    return esqlData;
}

async function getParameters(schema){

}

/* Remove Values */

async function removeAdditionalValues(obj) {

    //    treeLevel = parseInt(treeLevel) + 1;
    for (const i in obj) {

        if (typeof obj[i] === 'object' || Array.isArray(obj[i])) {
            var type = obj[i]["type"]
            await removeAdditionalValues(obj[i]);
        } else {
            var typeOfObject = obj[i].toString();
            if (!(typeOfObject === "object" || typeOfObject === "array" || typeOfObject.includes("#/definitions") || typeOfObject.indexOf(' ') >= 0 || typeof type === "undefined")) {
                // jsonSourceArray.push(path + ":" + method + ":" + "JSON.Data" + indent.trim() + "." + type);
                //console.log("SHOW DATA ::: ", obj[i])
            }
        }
    }
    return "jsonSourceArray";
}


async function flatten(data) {
    var result = {};
    function recurse (cur, prop) {
        if (Object(cur) !== cur) {
            result[prop] = cur;
           // console.log("Flatten :",result[prop]);
        } else if (Array.isArray(cur)) {
             for(var i=0, l=cur.length; i<l; i++)
                 recurse(cur[i], prop + "[" + i + "]");
            if (l == 0)
                result[prop] = [];
        } else {
            var isEmpty = true;
            for (var p in cur) {
                isEmpty = false;
                recurse(cur[p], prop ? prop+"."+p : p);
            }
            if (isEmpty && prop)
                result[prop] = {};
        }
    }
    
    recurse(data, "");
    return result;
}


async function removeExtraProperties(data){
    //Check for converting JSON to Array {} - [] for forward
    //console.log("Whole Data : ",data)
    var dataKeys = Object.keys(data);
    var eachValue ;
    var returnData = {};
    var dataType;
    //console.log("Remove Array ::: ",Object.keys(data));
    for(var eachKey of dataKeys){
        eachValue = eachKey;
        //console.log("EACH  ::: ",eachValue)
        if(eachValue.endsWith("type")){
           
            dataType = data[eachKey];
        //    console.log(eachValue," :::: ",dataType)
            returnData[eachValue] = dataType
            //console.log("SHOW REturn Data LL ",returnData)
        }
        else {
           // console.log("Inside Else :: ",data[eachKey])
        }
    }
    /* If an object is an array the datatype catches object 
       instead of array due to the array consisting 'items' keyword 
       which contains object */
   // console.log("Whole Data After Cleaning ::: ",returnData);
    // return await removeParameterAndItem(returnData);
    return returnData;
        //return returnData;
}

/* UnFlatten JSON Data */
async function formHierarchy(data) {
    "use strict";
    if (Object(data) !== data || Array.isArray(data))
        return data;
    var regex = /\.?([^.\[\]]+)|\[(\d+)\]/g,
        resultholder = {};
    for (var p in data) {
        var cur = resultholder,
            prop = "",
            m;
        while (m = regex.exec(p)) {
            cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));
            prop = m[2] || m[1];
        }
        cur[prop] = data[p];
    }
    return resultholder[""] || resultholder;
};



async function removeParameterAndItem(jsonObject) {
    var eachRecord;
    var jsonObj
    var cleanData = {};
    var uncleanData = [];

    //console.log("Full JSON Object ::: ",jsonObject)
    // jsonObject has all the data

   jsonObj = Object.keys(jsonObject);
    //console.log("Show JSON Object ::: ",jsonObject)
    for (var data of jsonObj) {
      //  console.log(" :: Each Data Object :: ",data)
        eachRecord = data.split(".");
        for (var j = 0; j < eachRecord.length; j++) {
            if (eachRecord[j] === eachRecord[j + 1]) {
                if (eachRecord[j] === "properties") {
                    //console.log("Show inside Data Node")
                    eachRecord.splice(parseInt(j+1), 1);
                }

            } else {
                if (eachRecord[j] === "properties" ) {
                    eachRecord.splice(j, 1);
                    j = j - 1;
                }
            }         
        }

        values = eachRecord.join('.')
        //console.log(data ,":: Each Value Data :: ",jsonObject[data])
        //console.log(": j j+1 :")
        //console.log(jsonObject[data],"::: SHOW VALUES L LLLLL  LLL :::",values)
        if(cleanData[values]!=undefined){
           // console.log(cleanData[values],"::: Inside clean duplicate :::: ",values);
           // console.log(data," : Display Data : ",jsonObject[data]);
            //cleanData[values].concat(jsonObject[data]);
            /* Check the code.. changes need to be done. For eg: transactions.items.properties.item_list.properties.items.type 
            changes to transactions.item_list.type which is a different data. */
            cleanData[values] = jsonObject[data];
           // console.log(values,"After value",cleanData[values])
        }
        else{
            cleanData[values] = jsonObject[data];
        }
    }
    //console.log("Clean Data ::: ",cleanData)
    return cleanData;
}
module.exports.extractData = extractData;