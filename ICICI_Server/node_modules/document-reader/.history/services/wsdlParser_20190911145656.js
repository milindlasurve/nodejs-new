// var express = require('express');
// var soap = require('soap');
// var Q = require('q');
var wsdl = "/home/dell/samplewsdl/bookservice.wsdl";
wsdl = "https://graphical.weather.gov/xml/SOAP_server/ndfdXMLserver.php?wsdl";
//wsdl= "/home/dell/Downloads/WSDL1.wsdl";
wsdl = "/home/dell/samplewsdl/stockquote.wsdl";

/*Function variables*/

var wsdlObject;
var treeLevel=0;
var parent;
var returnObject = [];
var structuredData = [];
 var object = {};

/* Another object which contains just values*/
 var allObjects=[];		
/* Retrieve a wsdl file as an Object  */


/* Reads the WSDL File and Converts it into a JSON Object */
async function readWsdl(wsdlData){

	//console.log(wsdlData);
	for(var key in wsdlData){
		treeLevel=0;
		var returnReadWsdl = await eachRecursive(treeLevel,wsdlData[key]);
		structuredData.push(object)

		if(key){
			return allObjects;
		}
	}
	
}

var service;
var endpoint;
var operations;
var paramType;
var operationsArray = [];
 async function eachRecursive(treeLevel,wsdlData){ 		
		treeLevel+=1;
		for(var key in wsdlData){
			var val = removeIntegerKeys(key);
			if(!val){
				if(treeLevel==1){
					endpoint=key;
					//console.log(treeLevel," :::: 1 :::::",key);	
				}
				else if(treeLevel==2){
					operations = key;
					//console.log(treeLevel," :::: 2 :::::",key);
				}
				else if(treeLevel==3){
					paramType=key
					//console.log(treeLevel," :::: 3 :::::",key);	
				}
				else if(treeLevel>=4){
					//console.log(treeLevel," :::: 4 & + :::::",key);	
					if((wsdlData[key]).toString().startsWith('xs')&&(wsdlData[key]).includes(":")){
						
					/* Variable to store Request or Response Type. It changes after calling flatten method */
						var reqRes = paramType;
						var operationParam = operations;
						var endpointParam = endpoint;

						var flattenedValue = await flatten(wsdlData);
						//console.log("Flattened Value  ::: ", flattenedValue);
						var tree = await formHierarchy(flattenedValue);  
						//console.log("ParamType After : ",paramType)
						allObjects.push({endpoint:endpointParam,Operations:{operationId:operationParam,fields:tree,type:reqRes}});
						break;			
					}
				 }				
				 eachRecursive(treeLevel,wsdlData[key]);
			}
		}
	}

async function clearExtraVal(filteredArray){
	
	var returnReadWsdl = await readWsdl(filteredArray);				
	//console.log(returnReadWsdl);
	return returnReadWsdl;
}

 function removeIntegerKeys(integerKeys){
	if(parseInt(integerKeys) || integerKeys == '0'){
		return true;
	}
	else{
		return false;
	}
}


async function flatten(data) {
    var result = {};
    function recurse (cur, prop) {
        if (Object(cur) !== cur) {
            result[prop] = cur;
            //console.log("Flatten :",result[prop]);
        } else if (Array.isArray(cur)) {
             for(var i=0, l=cur.length; i<l; i++)
                 recurse(cur[i], prop + "[" + i + "]");
            if (l == 0)
                result[prop] = [];
        } else {
            var isEmpty = true;
            for (var p in cur) {
                isEmpty = false;
                recurse(cur[p], prop ? prop+"."+p : p);
            }
            if (isEmpty && prop)
                result[prop] = {};
        }
    }
    recurse(data, "");
    return await cleanData(result);
}


/* UnFlatten JSON Data */
async function formHierarchy(data) {
    "use strict";
    if (Object(data) !== data || Array.isArray(data))
        return data;
    var regex = /\.?([^.\[\]]+)|\[(\d+)\]/g,
        resultholder = {};
    for (var p in data) {
        var cur = resultholder,
            prop = "",
            m;
        while (m = regex.exec(p)) {
            cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));
            prop = m[2] || m[1];
        }
        cur[prop] = data[p];
    }
    return resultholder[""] || resultholder;
};

async function cleanData(data){

	var cleanData = {};

	//console.log("Data Length ::: ",data.length);
	for(var i in data){
		if(data[i].toString().startsWith("xs:")||data[i].toString().startsWith("xsd:"))
			cleanData[i] = data[i];
	}
//	console.log("After Filter :: ",cleanData)
	return cleanData;
} 


module.exports.readWsdl = readWsdl