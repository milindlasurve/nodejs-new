
var fs = require('fs');
var q = require("q");

var sourceType;
var targetType;
var fieldsValues;
var arrayDef;

//var template = "./templates/template.esql";


/**
 * 
 * @param {*} template 
 * @param {*} parameters 
 * @param {*} fileName 
 * 
 * @description Generates an ESQL File
 */
async function createEsqlReversal(template, parameters, fileName) {

	var deferred = q.defer();
	try {
		fieldValues = parameters.fields;
		sourceType = parameters.sourceType;
		targetType = parameters.targetType;

		var returnParameterDefinitions = await createParameterDefinitions(fieldValues, sourceType, targetType);
		var returnFieldDefinitions = await createFieldDefinitions(parameters.fieldDefinitions);
		//console.log("SHOW PARAMS ::: ", returnParameterDefinitions);

		if (returnParameterDefinitions) {

			readContent(template, fileName, function (err, content) {
				if (err) throw new Error("Could not read the Template. Reason : " + err);
				//console.log("Read Content ::: ",content)

				if (content) {

					writeContent(content, fileName, returnFieldDefinitions, returnParameterDefinitions, function (err, writeFile) {
						if (err) throw new Error("Could not generate ESQL. Reason : " + err);;
						//console.log("Result ::: ", writeFile);
						deferred.resolve(writeFile);

					});
				}
			})
		}
	}
	catch (e) {
		//console.error(e);
		deferred.reject(e);
		//return "Failed : " + e;
	}
	return deferred.promise;
}

// Temporary for LendBox
async function createParameterDefinitions(parameters, sourceType, targetType) {

	var esqlLHSValues = [];
	var esqlRHSValues = [];
	var values;
	var preset;
	// Capture Values for LHS

	try {
		for (var i in parameters) {
			//console.log("Value : ",parameters[i].source);
			values = (parameters[i].source).split(".");


			//Call the function 
			esqlLHSValues.push(await setLHSValue(values, sourceType));
		}

		// Capture Values for RHS
		for (var i in parameters) {
			//console.log("RHS Value : ",parameters[i].target);
			esqlRHSValues.push(await setRHSValue(parameters[i].target, targetType,parameters[i].operation));
		}

		//console.log(esqlLHSValues);
		//console.log(esqlRHSValues);

		var result = [esqlLHSValues, esqlRHSValues].reduce((a, b) => a.map((v, i) => v + "=" + b[i]));
		var res = "";

		for (var i in result) {
			res += result[i] + "\n";
		}
		//console.log(res);
		return res;
	}
	catch (e) { throw e; }
}

// For the LHS
async function setLHSValue(param, type) {

	var value = "";
	var preset = "";
	var result = "";

	try {
		for (var i = 0; i < param.length; i++) {
			if (param[i] === "items") {
				param[i] = "item";
			} else if (param[i] === "properties") {

				param.shift();
			}
			value += "\"" + param[i] + "\"";
		}

		value = replaceAll(value, "\"\"", "\".\"")
		//console.log("Split Value : ",value);
		//console.log("TYPE :::: ",type);
		if (type === "JSON") {
			preset = "SET OutputRoot.JSON.Data.Bank.";
		}
		else if(type === "XML"){
			preset = "SET OutputRoot.XMLNSC.BANK.";
		}
		else { }
		result = preset + value
		
		return result;

		// Splitting and again setting the dot (.) . But working only for the first time. Check
	}
	catch (e) { throw e; }
}

async function setRHSValue(param, type, operation) {
	//console.log(type);
	var preset = "";
	var result = "";
	try {
		if (type === "DFDL") {
			preset = "InputRoot.DFDL.ns1:REL_Input.record."
		}
		else if(type === "REVERSAL"){
			preset = "reversalFile.";
		}
		else { }
		result = preset + param + ";"

		if(operation === "CAST:DECIMAL"){
			result = "CAST("+preset+param+" AS DECIMAL(28,2));";
		}
		else if(operation === "CAST:INTEGER"){
			result = "CAST("+preset+param+" AS INTEGER CCSID 1208);";
		}

		return result;
	}
	catch (e) { throw e; }
}


/**
 * 
 * @param {*} fieldDefinitions 
 * @description  Generate Field Definitions in ESQL for Source and Target eg: Array 
 */
async function createFieldDefinitions(fieldDefinitions) {
	var result = "";

	var fieldName;
	var fieldType;
	var format;
	var preset;
	for (let i = 0; i < fieldDefinitions.length; i++) {
		fieldName = fieldDefinitions[i].fieldName;
		fieldType = fieldDefinitions[i].fieldType;
		format = fieldDefinitions[i].format;
		preset = fieldDefinitions[i].preset;

		esqlPreset = await setPreset(preset);
		esqlFormat = await setFormat(format);
		esqlFieldType = format + "." + fieldType;

		result += "CREATE FIELD " + esqlPreset + "." + esqlFormat + ".\"" + fieldName + "\" IDENTITY(" + esqlFieldType + ") \"" + fieldName + "\"\n";
		//console.log("RESULT :::: ", result);
		//"CREATE FIELD OutputRoot.JSON.Data."Virtual Account Number Verification IN" IDENTITY(JSON.Array) "Virtual Account Number Verification IN""


	}
	return result;
}

/**
 * 
 * @param {*} preset
 * @description  Set Preset based on the Side eg: LHS or RHS
 */
async function setPreset(preset) {
	try {

		if (preset === "source") {
			return "OutputRoot";
		}
		else if (preset === "target") {
			return "InputRoot";
		}
	} catch (e) {
		throw e;
	}

}

async function setFormat(format) {

	try {
		if (format === "JSON") {
			return "JSON.Data"
		}
	} catch (e) {
		throw e;
	}

}

async function setFieldType(preset, fieldType) {

	try {
		if (preset === "JSON") {
			if (fieldType === "array") {
				return preset.fieldType
			}
		}
	} catch (e) {
		throw e;
	}

}


/**
 * 
 * @param {*} template 
 * @param {*} fileName 
 * @param {*} callback 
 * 
 * @description Read a file
 */
async function readContent(template, fileName, callback) {

	fs.readFile(template, 'utf8', function (err, data) {
		if (err) {
			throw err;
		}
		//console.log("Data ::", data );
		callback(null, data);

	});
}

/**
 * 
 * @param {*} template 
 * @param {*} fileName 
 * @param {*} callback 
 * 
 * @description Copy a file content to another file
 */
function copycontent(template, fileName, callback) {

	fs.copyFile(template, fileName, (err) => {
		if (err) throw err;
		//console.log('source.txt was copied to destination.txt');
		callback(null, true);
	});

}


/**
 * 
 * @param {*} result 
 * @param {*} fileName 
 * @param {*} callback
 * 
 * @description Write contents to a file 
 */
async function writeContent(content, fileName, arrayContent, data, callback) {

	var result = content.replace("-- Code --", "-- Code --\n" + arrayContent + "\n\n" + data);

	fs.writeFile(fileName, result, 'utf8', function (err) {
		if (err) throw err;
		callback(null, "File generated");
	});

}

// Replace an occurrence repeatedly
function replaceAll(str, find, replace) {
	return str.replace(new RegExp(find, 'g'), replace);
}

module.exports.createEsqlReversal = createEsqlReversal
