var q = require("q");

var esqlGenerator = require("../services/esqlGenerator");
var esqlGeneratorReject = require("../services/esqlGeneratorReject");
var esqlGeneratorStatusCheck = require("../services/esqlGeneratorStatusCheck");
var esqlGeneratorReversal = require("../services/esqlGeneratorReversal");
var esqlGeneratorISurePayRequest = require("../services/esqlGeneratorISurePayRequest");
var esqlGeneratorISurePayResponse = require("../services/esqlGeneratorISurePayResponse");

var generateEsql = async function (template,parameters,fileName){

	var deferred = q.defer();
	var esql;
	
		esqlGenerator.createEsql(template,parameters,fileName).then(function(data){
		//	console.log("CreateESQL: ",data);
			deferred.resolve(data);

		}).catch(function (err) {
			deferred.reject({message:"Create ESQL Error",err:err})
		});
	
	return deferred.promise;
}

var generateEsqlReject = async function (template,parameters,fileName){

	var deferred = q.defer();
	var esql;
	
		esql = await esqlGeneratorReject.createEsqlReject(template,parameters,fileName).then(function(data){
			console.log("CreateESQL Accept/Reject: ",esql);
			deferred.resolve(esql);
		}).catch(function (err) {
			deferred.reject({message:"Create ESQL Reject/Accept Error",err:err})
		});
	
	return deferred.promise;;
		
		
}

var generateEsqlStatusCheck = async function (template,parameters,fileName){

	var deferred = q.defer();
	var esql;
	
		esql = await esqlGeneratorStatusCheck.createEsqlStatusCheck(template,parameters,fileName).then(function(data){
			//console.log("CreateESQL Status Check: ",data);
			deferred.resolve(data);
		}).catch(function (err) {
			deferred.reject({message:"Create ESQL Status Check Error",err:err})
		});
	
	return deferred.promise;;
		
}

var generateEsqlReversal = async function (template,parameters,fileName){

	var deferred = q.defer();
	var esql;
	
		esql = await esqlGeneratorReversal.createEsqlReversal(template,parameters,fileName).then(function(data){
			//console.log("CreateESQL Status Check: ",data);
			deferred.resolve(data);
		}).catch(function (err) {
			deferred.reject({message:"Create ESQL Ecollection Reversal Error",err:err})
		});
	
	return deferred.promise;;
		
}



var generateEsqlISurePayRequest = async function (template,parameters,fileName){

	var deferred = q.defer();
	var esql;
	
		esql = await esqlGeneratorISurePayRequest.createEsqlISurePayRequest(template,parameters,fileName).then(function(data){
			//console.log("CreateESQL Status Check: ",data);
			deferred.resolve(data);
		}).catch(function (err) {
			deferred.reject({message:"Create ESQL iSurePAy Request Error",err:err})
		});
	
	return deferred.promise;;
		
}

var generateEsqlISurePayResponse = async function (template,parameters,fileName){

	var deferred = q.defer();
	var esql;
	
		esql = await esqlGeneratorISurePayResponse.createEsqlISurePayResponse(template,parameters,fileName).then(function(data){
			//console.log("CreateESQL Status Check: ",data);
			deferred.resolve(data);
		}).catch(function (err) {
			deferred.reject({message:"Create ESQL iSurePay Response Error",err:err})
		});
	
	return deferred.promise;;
		
}


module.exports.generateEsql = generateEsql
module.exports.generateEsqlReject = generateEsqlReject
module.exports.generateEsqlStatusCheck = generateEsqlStatusCheck
module.exports.generateEsqlReversal = generateEsqlReversal
module.exports.generateEsqlISurePayRequest = generateEsqlISurePayRequest
module.exports.generateEsqlISurePayResponse = generateEsqlISurePayResponse

